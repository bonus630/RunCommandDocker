<UserControl x:Class="RunCommandDocker.DockerUI"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             xmlns:local="clr-namespace:RunCommandDocker" 
             xmlns:popup="clr-namespace:RunCommandDocker.MyPopup" 
             d:DataContext="{d:DesignInstance Type=local:ProjectsManager}"
             xmlns:converters="clr-namespace:RunCommandDocker.Converters"
             mc:Ignorable="d" 
             MinWidth="225" Loaded="UserControl_Loaded">
    <UserControl.Resources>
        <ResourceDictionary>
            <Style x:Key="FocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <converters:IntToVisibilityConverter x:Key="IntToVisibilityConverter" />
            <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />
            <converters:TypeToVisibilityConverter x:Key="TypeToVisibilityConverter" />
            <converters:TypeToStringConverter x:Key="TypeToStringConverter" />
            <converters:ReverseBoolVisibilityConverter x:Key="ReverseBoolVisibilityConverter" />
            <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Styles/Colors.xaml"/>
                <ResourceDictionary Source="Styles/Styles.xaml"/>
                <ResourceDictionary Source="Styles/ScrollComponentsStyles.xaml"/>
                <ResourceDictionary Source="Styles/ListComponentsStyles.xaml"/>
                <ResourceDictionary Source="Styles/TreeComponentsStyles.xaml"/>
                <ResourceDictionary Source="Resources/Images.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>

    </UserControl.Resources>
    <DockPanel LastChildFill="true">
        <Grid Height="26" DockPanel.Dock="Top" HorizontalAlignment="Right">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="26"/>
                <ColumnDefinition Width="26"/>
                <ColumnDefinition Width="26"/>
                <ColumnDefinition Width="26"/>
                <ColumnDefinition Width="26"/>
                <ColumnDefinition Width="26"/>
            </Grid.ColumnDefinitions>
            <Button Grid.Column="5" Style="{DynamicResource NoBorderButton}" Width="22" Height="22" Name="btn_selectFolder" Click="btn_selectFolder_Click">
                <Button.ToolTip>
                    <Label Content="Select a folder to monitor"/>
                </Button.ToolTip>
                <Image Style="{DynamicResource FolderBrowserDialogControlImage}" />
            </Button>
            <Button Grid.Column="4" Style="{DynamicResource NoBorderButton}" Width="22" Height="22" Name="btn_openFolder" Click="btn_openFolder_Click" >
                <Button.ToolTip>
                    <StackPanel>
                        <Label Content="Open Folder"/>
                        <Label Content="{Binding Dir}" FontWeight="Bold" />
                    </StackPanel>
                </Button.ToolTip>
                <Image Style="{DynamicResource FolderOpenedImage}" />
            </Button>
        </Grid>
      
        <Grid DockPanel.Dock="Bottom">
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <GroupBox Grid.Row="0" Header="Shape Range Manager" Margin="0,10">
                <Grid Height="26">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="26"/>
                        <ColumnDefinition Width="26"/>
                        <ColumnDefinition Width="26"/>
                        <ColumnDefinition Width="26"/>
                        <ColumnDefinition Width="26"/>
                        <ColumnDefinition Width="26"/>
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <Button Grid.Column="0"  Style="{DynamicResource NoBorderButton}"  Width="22" Height="22"   Name="btn_addSelection" Click="btn_addSelection_Click" >
                        <Button.ToolTip>
                            <Label Content="Add Selection to ShapeRange Reference"/>
                        </Button.ToolTip>
                        <Image Style="{DynamicResource AddShapeRangeImage}" />
                    </Button>
                    <Button Grid.Column="1"  Style="{DynamicResource NoBorderButton}" Width="22" Height="22"  Name="btn_removeSelection"  Click="btn_removeSelection_Click">
                        <Button.ToolTip>
                            <Label Content="Remove Selection from ShapeRange Reference"/>
                        </Button.ToolTip>
                        <Image Style="{DynamicResource RemoveShapeRangeImage}" />
                    </Button>
                    <Button Grid.Column="2"  Style="{DynamicResource NoBorderButton}" Width="22" Height="22"  Name="btn_clearRange" Click="btn_clearRange_Click">
                        <Button.ToolTip>
                            <Label Content="Clean ShapeRange Reference"/>
                        </Button.ToolTip>
                        <Image Style="{DynamicResource CleanDataShapeRangeImage}" />
                    </Button>
                    <Button Grid.Column="5"  Style="{DynamicResource NoBorderButton}" Width="22" Height="22" Command="{Binding Path=SetShapeRangeToValueCommand}">
                        <Button.ToolTip>
                            <Label Content="Set ShapeRange Reference to this param"/>
                        </Button.ToolTip>
                        <Image Style="{DynamicResource CheckmarkShapeRangeImage}" />
                    </Button>
                    <Border Grid.Column="6" BorderBrush="{DynamicResource Footer.Static.Background}" BorderThickness="2" CornerRadius="6">
                        <Label HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding shapeRangeManager.Count}" />
                    </Border>
                </Grid>
            </GroupBox>
            <Border BorderThickness="1" Grid.Row="1" Visibility="{Binding SelectedCommand,Converter={StaticResource NullToVisibilityConverter}}" >
                <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" Margin="0,10">
                    <Expander  IsExpanded="true" x:Name="expander_Attributes"
                                  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalContentAlignment="Center" HorizontalContentAlignment="Center">
                        <Expander.Header>
                            <StackPanel HorizontalAlignment="{Binding Path=HorizontalAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Mode=OneWayToSource}" >
                                <StackPanel Orientation="Horizontal">
                                    <Button Style="{StaticResource NoBorderButton}" Width="16" Height="16"  HorizontalAlignment="Left"  
                        CommandParameter="{Binding SelectedCommand}" Command="{Binding Path=ExecuteCommand}">
                                        <Button.ToolTip>
                                            <StackPanel Orientation="Horizontal">
                                                <Label>Run</Label>
                                                <Label Content="{Binding SelectedCommand.Name}"/>
                                            </StackPanel>
                                        </Button.ToolTip>
                                        <Image Style="{DynamicResource PlayImage}" />
                                    </Button>
                                    <Button Style="{StaticResource NoBorderButton}" Width="16" Height="16"  HorizontalAlignment="Left"  
                        CommandParameter="{Binding SelectedCommand}" Command="{Binding Path=StopCommand}"
                                        Visibility="{Binding SelectedCommand.CanStop,Converter={StaticResource BoolToVisibilityConverter}}">
                                        <Button.ToolTip>
                                            <StackPanel Orientation="Horizontal">
                                                <Label>Run</Label>
                                                <Label Content="{Binding SelectedCommand.Name}"/>
                                            </StackPanel>
                                        </Button.ToolTip>
                                        <Image Style="{DynamicResource StopImage}" />
                                    </Button>
                                    <Label Content="{Binding SelectedCommand.Name}" />
                                </StackPanel>
                                <ProgressBar Height="2" IsIndeterminate="True"  Visibility="{Binding SelectedCommand.CanStop,Converter={StaticResource BoolToVisibilityConverter}}"/>
                            </StackPanel>
                        </Expander.Header>
                        <StackPanel Margin="0">
                            <GroupBox Header="Return" Margin="0,0,0,10" Visibility="{Binding SelectedCommand.ReturnsType,ConverterParameter={x:Type System:Void},Converter={StaticResource TypeToVisibilityConverter}}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="10" />
                                        <ColumnDefinition Width="20"/>
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="*" MinWidth="130"/>
                                    </Grid.ColumnDefinitions>
                                    <Label Grid.Row="0" Grid.Column="2" Content="Type:" />
                                    <Label Grid.Row="0" Grid.Column="3"  Content="{Binding SelectedCommand.ReturnsType.Name}" ToolTip="{Binding SelectedCommand.ReturnsType.FullName}"/>
                                    <Button   Grid.Row="1" Grid.Column="1" Style="{DynamicResource NoBorderButton}" 
                                              Width="16" Height="16" VerticalAlignment="Center"
                                    CommandParameter="{Binding SelectedCommand.Returns}"  
                                    Visibility="{Binding SelectedCommand.ReflectedProp.IsValueType,Converter={StaticResource ReverseBoolVisibilityConverter}}"
                                    Command="{Binding Path=CopyReturnsValueCommand}">
                                        <Button.ToolTip>
                                            <Label Content="Copy Value" />
                                        </Button.ToolTip>
                                        <Image Style="{DynamicResource CopyImage}" />
                                    </Button>
                                    <Label Grid.Row="1" Grid.Column="2" VerticalAlignment="Center" Content="Value:" />

                                    <Grid  Grid.Row="1" Grid.Column="3" VerticalAlignment="Stretch" Background="Transparent" MouseEnter="Label_MouseEnter" >
                                        <Label Content="{Binding SelectedCommand.Returns}" VerticalAlignment="Center"  x:Name="lba_returns" Margin="2"/>
                                    </Grid>

                                    <popup:MyPopup ToReflect="{Binding SelectedCommand.Returns}" PlacementTarget="{Binding ElementName=lba_returns}" Placement="Right" AllowsTransparency="True"
                                                       IsOpen="{Binding Path=MyPopupIsOpen}" 
                                                           PopupCloseEvent="MyPopup_PopupCloseEvent"/>

                                </Grid>
                            </GroupBox>
                            <GroupBox Header="Params" Visibility="{Binding SelectedCommand.Count,Converter={StaticResource IntToVisibilityConverter},FallbackValue=0}" Margin="0,10">
                                <ListView  ItemsSource="{Binding SelectedCommand.Items}" SelectionMode="Single" BorderThickness="0">
                                    <ListView.ItemContainerStyle>
                                        <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource ListViewItemCustomStyle}">
                                            <Setter Property="IsSelected" Value="{Binding IsSelected}" />
                                        </Style>
                                    </ListView.ItemContainerStyle>
                                    <ListView.ItemTemplate>
                                        <DataTemplate>
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition />
                                                    <RowDefinition />
                                                </Grid.RowDefinitions>
                                                <Label Grid.Row="0" Grid.Column="0" Content="{Binding Name}" />
                                                <Label Grid.Row="0" Grid.Column="1" Content="{Binding ArgumentType.Name}" ToolTip="{Binding ArgumentType.FullName}"/>
                                                <Label Grid.Row="1" Grid.Column="0" Content="Value:" />
                                                <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding Value,Converter={StaticResource TypeToStringConverter}}" VerticalContentAlignment="Center" Width="144" MouseLeftButtonUp="TextBox_MouseLeftButtonUp"/>
                                            </Grid>
                                        </DataTemplate>
                                    </ListView.ItemTemplate>
                                </ListView>

                            </GroupBox>
                        </StackPanel>
                    </Expander>

                </ScrollViewer>
            </Border>
            <ItemsControl Grid.Row="2"  HorizontalAlignment="Stretch" Margin="0,10,0,0" ItemsSource="{Binding PinnedCommands}" Background="{DynamicResource Footer.Static.Background}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <StackPanel.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Unpin" CommandParameter="{Binding}" 
                                          Command="{Binding Path=PlacementTarget.DataContext.Parent.Parent.Parent.TogglePinCommand,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ItemsControl}}">
                                        <MenuItem.Icon>
                                            <Image Style="{DynamicResource PinImage}"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                </ContextMenu>
                            </StackPanel.ContextMenu>
                            <Button Grid.Column="0" Style="{StaticResource NoBorderButton}" Width="16" Height="16"  
                                Visibility="{Binding Path=HasParam,  Converter={StaticResource ReverseBoolVisibilityConverter}}"
                        CommandParameter="{Binding}" Command="{Binding Path=DataContext.ExecuteCommand,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ItemsControl}}">
                                <Button.ToolTip>
                                    <StackPanel Orientation="Horizontal">
                                        <Label>Run</Label>
                                        <Label Content="{Binding Name}"/>
                                    </StackPanel>
                                </Button.ToolTip>
                                <Image Style="{DynamicResource PlayImage}" />
                            </Button>
                            <!--Visibility="{Binding Path=HasParam,  Converter={StaticResource ReverseBoolVisibilityConverter}}"-->
                            <Button Grid.Column="1"  Width="16" Height="16" Style="{DynamicResource NoBorderButton}"
                                Visibility="{Binding ReturnsType,ConverterParameter={x:Type System:Void},Converter={StaticResource TypeToVisibilityConverter}}"
                                CommandParameter="{Binding}" 
                                Command="{Binding Path=DataContext.SetCommandToValueCommand,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ItemsControl}}">
                                <Button.ToolTip>
                                    <Label Content="Set returns value to selected argument"/>
                                </Button.ToolTip>

                                <Image Style="{DynamicResource CheckmarkShapeRangeImage}" />

                            </Button>

                            <Label Content="{Binding Name}" FontSize="9" FontWeight="Bold" VerticalAlignment="Center" VerticalContentAlignment="Center" Foreground="{DynamicResource Default.Static.Foreground}" />
                        </StackPanel>


                    </DataTemplate>
                </ItemsControl.ItemTemplate>
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>

        </Grid>
       <TreeView DockPanel.Dock="Top" ItemsSource="{Binding Projects}" Name="treeViewCommands"
                  VirtualizingStackPanel.IsVirtualizing="True" VirtualizingStackPanel.VirtualizationMode="Recycling" TreeViewItem.Selected="TreeView_Selected">
            <!-- //Ref.:01 
            // Compare to another Ref.:01
             TreeViewItem.Selected="TreeView_Selected">-->

            <TreeView.Resources>
                <Style BasedOn="{StaticResource TreeViewItemCustomStyle}" TargetType="{x:Type TreeViewItem}">
                    <Setter Property="TreeViewItem.IsExpanded" Value="{Binding IsExpanded}"/>
                    <Setter Property="TreeViewItem.IsSelected" Value="{Binding IsSelected}"/>
                </Style>
                <HierarchicalDataTemplate  ItemsSource="{Binding Path=Items}" DataType="{x:Type local:Project}">
                    <Grid>
                        <Label Content="{Binding Path=Name}" Focusable="False" />
                    </Grid>
                </HierarchicalDataTemplate>
                <HierarchicalDataTemplate  ItemsSource="{Binding Path=Items}" DataType="{x:Type local:Module}" >
                    <Grid>
                        <Label Content="{Binding Path=Name}" Focusable="False"/>
                    </Grid>
                </HierarchicalDataTemplate>
                <DataTemplate DataType="{x:Type local:Command}">
                    <!--<DataTemplate.Triggers >
                        <DataTrigger Binding="{Binding IsSelected}" Value="True">
                            <Setter TargetName="treeViewItemRun" Property="b"
                        </DataTrigger>
                    </DataTemplate.Triggers>-->
                    <StackPanel>
                        <Grid Height="28" x:Name="treeViewItemRun">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="20"/>
                                <ColumnDefinition Width="20"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Pin" CommandParameter="{Binding}"
                                          Command="{Binding Path=PlacementTarget.DataContext.Parent.Parent.Parent.TogglePinCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}}"
                                         Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}">
                                        <MenuItem.Icon>
                                            <Image Style="{DynamicResource PinImage}"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                </ContextMenu>
                            </Grid.ContextMenu>
                            <Button Grid.Column="0" Style="{StaticResource NoBorderButton}" Width="16" Height="16"  
                                Visibility="{Binding Path=HasParam,  Converter={StaticResource ReverseBoolVisibilityConverter}}"
                        CommandParameter="{Binding}" Command="{Binding Path=DataContext.ExecuteCommand,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=TreeView}}">
                                <Button.ToolTip>
                                    <StackPanel Orientation="Horizontal">
                                        <Label>Run</Label>
                                        <Label Content="{Binding Name}"/>
                                    </StackPanel>
                                </Button.ToolTip>
                                <Image Style="{DynamicResource PlayImage}" />
                            </Button>
                            <!--Visibility="{Binding Path=HasParam,  Converter={StaticResource ReverseBoolVisibilityConverter}}"-->
                            <Button Grid.Column="1"  Width="16" Height="16" Style="{DynamicResource NoBorderButton}"
                                Visibility="{Binding ReturnsType,ConverterParameter={x:Type System:Void},Converter={StaticResource TypeToVisibilityConverter}}"
                                CommandParameter="{Binding}" 
                                Command="{Binding Path=DataContext.SetCommandToValueCommand,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=TreeView}}">
                                <Button.ToolTip>
                                    <Label Content="Set returns value to selected argument"/>
                                </Button.ToolTip>

                                <Image Style="{DynamicResource CheckmarkShapeRangeImage}" />

                            </Button>
                            <Label Grid.Column="2" VerticalAlignment="Center" Content="{Binding Name}" />
                        </Grid>
                        <ProgressBar Height="2" IsIndeterminate="True"  Visibility="{Binding CanStop,Converter={StaticResource BoolToVisibilityConverter}}"/>

                    </StackPanel>

                </DataTemplate>
            </TreeView.Resources>
        </TreeView>
    </DockPanel>
</UserControl>
